Source: golang-github-gorilla-mux
Section: golang
Priority: optional
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Uploaders: Arnaud Rebillout <arnaud.rebillout@collabora.com>,
           Tim Potter <tpot@hpe.com>,
           Anthony Fok <foka@debian.org>,
Rules-Requires-Root: no
Build-Depends: debhelper-compat (= 13),
               dh-golang,
               golang-any
Testsuite: autopkgtest-pkg-go
Standards-Version: 4.6.2
Homepage: https://github.com/gorilla/mux
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-github-gorilla-mux.git
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-github-gorilla-mux
XS-Go-Import-Path: github.com/gorilla/mux

Package: golang-github-gorilla-mux-dev
Architecture: all
Depends: ${misc:Depends}
Multi-Arch: foreign
Description: powerful URL router and dispatcher for golang
 Package gorilla/mux implements a request router and dispatcher.
 .
 The name mux stands for "HTTP request multiplexer". Like the standard
 http.ServeMux, mux.Router matches incoming requests against a list of
 registered routes and calls a handler for the route that matches the URL
 or other conditions. The main features are:
 .
  * Requests can be matched based on URL host, path, path prefix, schemes,
    header and query values, HTTP methods or using custom matchers.
  * URL hosts and paths can have variables with an optional regular expression.
  * Registered URLs can be built, or "reversed", which helps maintaining
    references to resources.
  * Routes can be used as subrouters: nested routes are only tested if the
    parent route matches. This is useful to define groups of routes that share
    common conditions like a host, a path prefix or other repeated attributes.
    As a bonus, this optimizes request matching.
  * It implements the http.Handler interface so it is compatible with the
    standard http.ServeMux.
